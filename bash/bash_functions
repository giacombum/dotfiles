#!/bin/bash
# Add paths to PATH
pathmunge () {
  if test -d $1 && ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
    if [ "$2" = "after" ] ; then
      PATH=$PATH:$1
    else
      PATH=$1:$PATH
    fi
  fi
}

# Simple calculator
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi;
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Extra many types of compressed packages
extract () {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar -jxvf $1 ;;
      *.tar.gz) tar -zxvf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.dmg) hdiutil mount $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar -xvf $1 ;;
      *.tbz2) tar -jxvf $1 ;;
      *.tgz) tar -zxvf $1 ;;
      *.zip) unzip $1 ;;
      *.ZIP) unzip $1 ;;
      *.pax) cat $1 | pax -r ;;
      *.pax.Z) uncompress $1 —stdout | pax -r ;;
      *.Z) uncompress $1 ;;
      *) echo "'$1' cannot be extracted/mounted via extract()";;
   esac
 else
   echo "'$1' is not a valid file to extract"
 fi
}

# Find hard/symbolic-links of a linked-file
function find-links () {
  inum=`ls -Ldi $1 | awk '{print $1}'`;
  if [ $# -eq 0 ] ; then
    echo "find-links, find hard/symbolic-links of a linked-file";
    echo "Usage:";
    echo "  find-links linked-file_name [path]";
  elif [ $# -eq 2 ] ; then
    find $2 -follow -inum $inum;
  else
    find . -follow -inum $inum;
  fi;
}

# Find broken symbolic-links into a path (is not specified . is used)
function find-broken-links () {
  if [ $# -eq 0 ] ; then
    find . -type l -! -exec test -e {} \; -print;
  elif [ $# -eq 1 ] ; then
    find $1 -type l -! -exec test -e {} \; -print;
  fi;
}

# Find duplicate files into a path (is not specified . is used)
function find-duplicates () {
  if [ $# -eq 0 ] ; then
    find . -not -empty -type f -printf "%s\n" | sort -rn | uniq -d | xargs -I{} -n1 find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate;
  elif [ $# -eq 1 ] ; then
    find $1 -not -empty -type f -printf "%s\n" | sort -rn | uniq -d | xargs -I{} -n1 find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate;
  fi;
}

# Update npm packages
function npm-update () {
  for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2)
  do
    sudo npm -g install "$package"
  done
}
